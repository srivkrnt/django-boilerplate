"""
Django settings for rbac_svc project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from sys import path

from configurations import Configuration

from rbac_svc.settings.celery import CelerySettingsMixin
from rbac_svc.settings.constance import LiveSettingsMixin


class Settings(LiveSettingsMixin, CelerySettingsMixin, Configuration):
    """
    Settings for the service
    """

    # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    # Add our project to our pythonpath, this way we don't need to type our project
    # name in our dotted import paths:
    path.append(BASE_DIR)

    SECRET_KEY = os.environ.get('SECRET_KEY', '')

    ALLOWED_HOSTS = ["*"]

    # App configurations
    DJANGO_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]
    HEALTH_CHECK_APPS = [
        # 'health_check',                             # required
        # 'health_check.db',                          # stock Django health checkers
        # 'health_check.cache',
        # 'health_check.contrib.redis',
        # 'health_check.storage',
        # 'health_check.contrib.migrations',
    ]
    THIRD_PARTY_APPS = [
        'rest_framework',
        'drf_yasg',
        'django_celery_beat',
        'django_celery_results',
        'django_extensions',
        'constance',
        'constance.backends.database'
    ]
    LOCAL_APPS = [
        'apps.base.apps.BaseConfig',
        'apps.accounts.apps.AuthConfig',
        'apps.consumer.apps.ConsumerConfig',
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    INSTALLED_APPS = property(
        lambda self: self.DJANGO_APPS + self.HEALTH_CHECK_APPS + self.THIRD_PARTY_APPS + self.LOCAL_APPS
    )

    ROOT_URLCONF = 'rbac_svc.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    REST_FRAMEWORK = {
        'DEFAULT_PAGINATION_CLASS': 'apps.base.pagination.CustomPagination',
        'PAGE_SIZE': 10,
        'SEARCH_PARAM': 'searchTerm',
        'DEFAULT_RENDERER_CLASSES': ('djangorestframework_camel_case.render.CamelCaseJSONRenderer',),
        'DEFAULT_PARSER_CLASSES': (
            'djangorestframework_camel_case.parser.CamelCaseFormParser',
            'djangorestframework_camel_case.parser.CamelCaseMultiPartParser',
            'djangorestframework_camel_case.parser.CamelCaseJSONParser',
        ),
    }

    WSGI_APPLICATION = 'rbac_svc.wsgi.application'
    DATABASES = {
        'default': {
            'ENGINE': 'psqlextra.backend',
            'NAME': os.environ.get('POSTGRES_DBNAME') or os.environ.get("POSTGRESQL_DB_NAME"),
            'USER': os.environ.get('POSTGRES_USERNAME') or os.environ.get("POSTGRESQL_DB_USER"),
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD') or os.environ.get("POSTGRESQL_DB_PASSWORD"),
            'HOST': os.environ.get('POSTGRES_HOST') or os.environ.get("POSTGRESQL_DB_HOST", "localhost"),
            'PORT': os.environ.get('POSTGRES_PORT') or os.environ.get("POSTGRESQL_DB_PORT", "5432"),
        }
    }

    REDIS_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/2')
    CACHES = {
        'default': {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": REDIS_URL,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            },
            "KEY_PREFIX": "rbac"
        }
    }

    # Password validation
    # https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/4.0/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_TZ = True

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.0/howto/static-files/

    STATIC_URL = 'static/'

    # Default primary key field type
    # https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
    KAFKA_BOOTSTRAP_SERVER = os.environ.get('KAFKA_BOOTSTRAP_SERVER', 'localhost:9094')
